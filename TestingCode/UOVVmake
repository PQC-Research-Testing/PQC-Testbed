CC =  gcc
LD =   $(CC)

PROJ = V
SRC_DIR  := ../UOV/Optimized_Implementation/avx2/$(PROJ)
GEN_DIR  := ../UOV/Optimized_Implementation/avx2
CFLAGS   := -O3 $(CFLAGS)  -Wall -Wextra -Wpedantic -fno-omit-frame-pointer
INCPATH  := -I/usr/local/include -I/opt/local/include -I/usr/include -I$(SRC_DIR)
LDFLAGS  := $(LDFLAGS)
LIBPATH  = -L/usr/local/lib -L/opt/local/lib -L/usr/lib
LIBS     = -lcrypto

CFLAGS += -mavx2 -maes

SRCS           :=  $(wildcard $(SRC_DIR)/*.c)
SRCS_O         :=  $(SRCS:.c=.o)

OBJ = $(SRCS_O)

EXE= sign_api-test

ifdef KAT
	CFLAGS       += -D_NIST_KAT_
	SRC_EXT_DIRS := nistkat
	INCPATH      += -I./nistkat
	EXE          += PQCgenKAT_sign
endif

OBJ2 = $(filter-out $(SRC_DIR)/utils_randombytes.o $(SRC_DIR)/utils_randombytes.c $(SRC_DIR)/utils_randombytes.h,$(OBJ))
.INTERMEDIATE:  $(OBJ)
.PHONY: all clean

all: $(EXE)
sign_api-test: $(OBJ) $(GEN_DIR)/sign_api-test.c
	$(CC) $(CFLAGS) $(INCPATH) $(LDFLAGS) $(LIBPATH) $^ -o $@ $(LIBS)

bench_uov: $(OBJ2) BenchmarkingcodeHAWK.c rng.o
	$(CC) $(CFLAGS) $(INCPATH) $(LDFLAGS) $(LIBPATH) $^ -o $@ $(LIBS)
	$(info $(OBJ))
PQCgenKAT_sign: $(OBJ) PQCgenKAT_sign.o
	$(LD) $(LDFLAGS) $(LIBPATH) -o $@ $^ $(LIBS)

PQCgenKAT_sign.o: nistkat/PQCgenKAT_sign.c
	$(CC) $(CFLAGS) $(INCPATH) -c $<

%.o: $(SRC_DIR)/%.c
	$(CC) $(CFLAGS) $(INCPATH) -c $<

%.o: $(SRC_DIR)/%.c
	$(CC) $(CFLAGS) $(INCPATH) -c $<

define GEN_O
%.o: $(1)/%.c
	$(CC) $(CFLAGS) $(INCPATH) -c $$<
endef
$(foreach dir, $(SRC_EXT_DIRS), $(eval $(call GEN_O,$(dir))))


clean:
	-rm -f *.o *.req *.rsp PQCgenKAT_sign bench_uov rng.o$(EXE);
